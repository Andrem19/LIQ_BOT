mod params;
mod types;
mod orca_logic;
mod telegram_service;
mod wirlpool_services;
mod exchange;
mod orchestrator;
pub mod utils;

use anyhow::Result;
use dotenv::dotenv;
use std::sync::Arc;
use std::env;
use tokio::sync::mpsc::UnboundedSender;
use tokio::sync::Notify;

use std::time::Duration;
use tokio::time::sleep;
use std::sync::atomic::AtomicBool;
use params::{TOTAL_USDC_SOLUSDC, USDC_SOLRAY, PCT_LIST_1, USDC_SOLWETH, WSOL, RAY, USDC, WETH};
use types::PoolConfig;


use crate::telegram_service::tl_engine::ServiceCommand;

#[tokio::main]
async fn main() -> Result<()> {
    dotenv().ok();

    let close_notify = Arc::new(tokio::sync::Notify::new());

    // ‚îÄ‚îÄ‚îÄ Telegram
    let (tx_tg, _commander) = telegram_service::tl_engine::start(close_notify.clone());

    let need_to_open_new_positions = Arc::new(AtomicBool::new(true)); //true - –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ; false - –Ω–µ –±—É–¥—É—Ç

    // ‚îÄ‚îÄ‚îÄ A)  SOL/USDC –ø—É–ª  ‚Äì 3 –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    let solusdc_cfg = PoolConfig {
        program: "whirlpool",
        name:    "SOL/USDC",
        pool_address: Box::leak(env::var("SOLUSDC_POOL")?.into_boxed_str()),
        mint_a:  WSOL,  decimal_a: 9,
        mint_b:  USDC,   decimal_b: 6,
        amount:  0.0,   sol_init: 0.0,
        position_1: None, position_2: None, position_3: None,
    };

    // ‚îÄ‚îÄ‚îÄ B)  RAY/SOL –ø—É–ª  ‚Äì 1 –¥–∏–∞–ø–∞–∑–æ–Ω
    let raysol_cfg = PoolConfig {
        program: "whirlpool",
        name:    "RAY/SOL",
        pool_address: Box::leak(env::var("RAYSOL_POOL")?.into_boxed_str()),
        mint_a:  WSOL,  decimal_a: 9,
        mint_b:  RAY,   decimal_b: 6,
        amount:  0.0,   sol_init: 0.0,
        position_1: None, position_2: None, position_3: None,
    };

    // ‚îÄ‚îÄ‚îÄ B)  whETH/SOL –ø—É–ª  ‚Äì 1 –¥–∏–∞–ø–∞–∑–æ–Ω
    let ethsol_cfg = PoolConfig {
        program: "whirlpool",
        name:    "WETH/SOL",
        pool_address: Box::leak(env::var("ETHSOL_POOL")?.into_boxed_str()),
        mint_a:  WSOL,  decimal_a: 9,
        mint_b:  WETH,   decimal_b: 8,
        amount:  0.0,   sol_init: 0.0,
        position_1: None, position_2: None, position_3: None,
    };

    let report_cfgs = vec![ solusdc_cfg.clone(), raysol_cfg.clone(), ethsol_cfg.clone()];

    tokio::spawn(run_pool_with_restart(
        solusdc_cfg.clone(), TOTAL_USDC_SOLUSDC, PCT_LIST_1, true, 
        tx_tg.clone(), need_to_open_new_positions.clone(), close_notify.clone()
    ));
    sleep(Duration::from_secs(20)).await;

    tokio::spawn(run_pool_with_restart(
        raysol_cfg.clone(), USDC_SOLRAY, [0.0;4], false,
        tx_tg.clone(), need_to_open_new_positions.clone(), close_notify.clone()
    ));
    sleep(Duration::from_secs(10)).await;

    tokio::spawn(run_pool_with_restart(
        ethsol_cfg.clone(), USDC_SOLWETH, [0.0;4], false,
        tx_tg.clone(), need_to_open_new_positions.clone(), close_notify.clone()
    ));

    // ‚îÄ‚îÄ‚îÄ C)  –µ–¥–∏–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç—ë—Ä –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    let tx_tel = tx_tg.clone();
    tokio::spawn(async move {
        use tokio::time;
        let mut itv = time::interval(Duration::from_secs(300));

        loop {
            itv.tick().await;
            let mut msg = String::new();

            for cfg in &report_cfgs {
                match orchestrator::build_pool_report(cfg).await {
                    Ok(part) => msg.push_str(&part),
                    Err(e)   => msg.push_str(&format!("‚ö†Ô∏è report for {} failed: {e}\n", cfg.name)),
                }
            }

            let _ = tx_tel.send(ServiceCommand::SendMessage(msg));
        }
    });

    // ‚îÄ‚îÄ‚îÄ –¥–µ—Ä–∂–∏–º runtime –∂–∏–≤—ã–º
    futures::future::pending::<()>().await;

    Ok(())
}

async fn run_pool_with_restart(
    cfg:        PoolConfig,
    capital:    f64,
    pct:        [f64; 4],
    three_rng:  bool,
    tx_tg:      UnboundedSender<ServiceCommand>,
    need_new: Arc<AtomicBool>,
    close_ntf:  Arc<Notify>,
) {
    use tokio::time::{sleep, Duration};

    loop {
        let res = orchestrator::orchestrator_pool(
            cfg.clone(), capital, pct, three_rng, tx_tg.clone(), need_new.clone(), close_ntf.clone()
        ).await;

        match res {
            // –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ (–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã–ª–∏ / —Ü–µ–Ω–∞ –≤—ã—à–ª–∞ ‚Ä¶) ‚Äî
            // —á–µ—Ä–µ–∑ 10 —Å –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ
            Ok(()) => sleep(Duration::from_secs(10)).await,

            Err(e) => {
                let txt = format!("{e:#}");
                // ¬´–Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤¬ª (–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ open_with_funds‚Ä¶)
                if txt.contains("–≤—Å—ë –µ—â—ë –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç") ||
                   txt.contains("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∏ B, –Ω–∏ USDC") {
                    let _ = tx_tg.send(ServiceCommand::SendMessage(format!(
                        "‚õî {} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤.\n{txt}",
                        cfg.name
                    )));
                    break;                      // –±–æ–ª—å—à–µ **–Ω–µ** —Ä–µ—Å—Ç–∞—Ä—Ç–∏–º
                }
                if txt.contains("dns error") || txt.contains("timed out") {
                    let _ = tx_tg.send(ServiceCommand::SendMessage(format!(
                        "üåê {}: RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 15 —Å‚Ä¶", cfg.name
                    )));
                    sleep(Duration::from_secs(15)).await;
                    continue;              // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
                }

                // –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Üí —Å–æ–æ–±—â–∞–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                let _ = tx_tg.send(ServiceCommand::SendMessage(format!(
                    "‚ö†Ô∏è {} —É–ø–∞–ª: {txt}\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å‚Ä¶",
                    cfg.name
                )));
                sleep(Duration::from_secs(15)).await;
            }
        }
    }
}