mod params;
mod types;
mod orca_logic;
mod telegram_service;
mod wirlpool_services;
mod exchange;
mod orchestrator;
pub mod utils;
pub mod database;
pub mod pyth_ws;

use anyhow::Result;
use dotenv::dotenv;
use std::sync::Arc;
use anyhow::anyhow;
use std::env;
use tokio::sync::mpsc::UnboundedSender;
use tokio::sync::Notify;
use std::sync::atomic::Ordering;
use chrono::Utc;


use std::time::Duration;
use tokio::time::sleep;
use std::sync::atomic::AtomicBool;
use params::{AMOUNT, PCT_LIST_1, PCT_LIST_2, WSOL, USDC, POOL_NUMBER};
use types::PoolConfig;
use database::triggers;
use database::triggers::Trigger;
use database::positions;
use database::history;
use database::general_settings;

use crate::{telegram_service::tl_engine::ServiceCommand};

#[tokio::main]
async fn main() -> Result<()> {
    dotenv().ok();


    triggers::init().await?;
    positions::init_positions_module().await?;
    history::init_history_module().await?;
    general_settings::init_general_settings_module().await?;
    general_settings::init_settings_from_params().await?;

    let close_notify = Arc::new(tokio::sync::Notify::new());

    // ‚îÄ‚îÄ‚îÄ Telegram
    let (tx_tg, _commander) = telegram_service::tl_engine::start(close_notify.clone());

    let need_to_open_new_positions_SOLUSDC = Arc::new(AtomicBool::new(false)); //true - –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ; false - –Ω–µ –±—É–¥—É—Ç

    let flag = need_to_open_new_positions_SOLUSDC.load(Ordering::SeqCst);
    let tr = Trigger {
        name:     "position_start_open".into(),
        state:    !flag,
        position: String::new(),
    };
    triggers::upsert_trigger(&tr).await?;

    let new_positions = Arc::new(AtomicBool::new(true));
    // ‚îÄ‚îÄ‚îÄ A)  SOL/USDC –ø—É–ª  ‚Äì 3 –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    let solusdc_cfg = PoolConfig {
        program: "whirlpool".to_string(),
        name:    "SOL/USDC".to_string(),
        pool_address: env::var("SOLUSDC_POOL")?,
        mint_a:  WSOL.to_string(),  decimal_a: 9,
        mint_b:  USDC.to_string(),   decimal_b: 6,
        amount:  0.0,
        position_1: None, position_2: None, position_3: None,

        date_opened:           Utc::now(),     // –∏–ª–∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –∑–∞–≥–ª—É—à–µ—á–Ω–∞—è –¥–∞—Ç–∞
        is_closed:             false,          // –ø–æ–∑–∏—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞
        commission_collected_1: 0.0,            // –ø–æ–∫–∞ –∫–æ–º–∏—Å—Å–∏–π –Ω–µ—Ç
        commission_collected_2: 0.0,
        commission_collected_3: 0.0,
        total_value_open:      0.0,            // –ª–∏–±–æ –∏—Å—Ö–æ–¥–Ω–∞—è TVL
        total_value_current:   0.0,            // –ª–∏–±–æ —Ç–µ–∫—É—â–µ–µ TVL
    };

    let report_cfgs = vec![solusdc_cfg.clone()];

    tokio::spawn(run_pool_with_restart(
        solusdc_cfg.clone(), AMOUNT, PCT_LIST_1, true, 
        tx_tg.clone(), need_to_open_new_positions_SOLUSDC.clone(), close_notify.clone(), 5, Some(0.03), new_positions.clone()
    ));
    sleep(Duration::from_secs(50)).await;

    // ‚îÄ‚îÄ‚îÄ C)  –µ–¥–∏–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç—ë—Ä –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    let tx_tel = tx_tg.clone();
    tokio::spawn({
        let report_cfgs = report_cfgs.clone();   // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        let tx_tel      = tx_tel.clone();
        async move {
            use tokio::time::{interval, Duration};
            use std::collections::VecDeque;
    
            let mut itv          = interval(Duration::from_secs(300));
            let mut prev_total   = 0.0;
            let mut last_profits = VecDeque::<f64>::with_capacity(12); // 12√ó5 –º–∏–Ω = —á–∞—Å
            let mut first_loop = true;
            let mut counter = 0;

            loop {
                match triggers::get_trigger("position_start_open").await {
                    Ok(Some(tr)) if tr.state => break, // –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä –≤–∫–ª—é—á—ë–Ω
                    Ok(_) => {
                        // –ª–∏–±–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏, –ª–∏–±–æ state=false
                        sleep(Duration::from_secs(1)).await;
                    }
                    Err(e) => {
                        // –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –ë–î ‚Äî –ª–æ–≥–∏—Ä—É–µ–º, –∂–¥—ë–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                        log::error!("Error reading trigger: {}", e);
                        sleep(Duration::from_secs(5)).await;
                    }
                }
            }
    
            loop {
                itv.tick().await;
                counter+=1;

                // 1) —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç—á—ë—Ç—ã
                let mut grand_total = 0.0;
                let mut msg = String::new();

                let is_new_positions = new_positions.load(Ordering::SeqCst);
    
                for cfg in &report_cfgs {
                    match orchestrator::build_pool_report(cfg).await {
                        Ok(rep) => {
                            grand_total += rep.total;
                            msg.push_str(&rep.text);
                        }
                        Err(e) => msg.push_str(
                            &format!("‚ö†Ô∏è report for {} failed: {e}\n", cfg.name)),
                    }
                }
    
                // 2) —Å—á–∏—Ç–∞–µ–º profit –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º ¬´–∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä¬ª
                let mut profit = 0.0;

                
                if is_new_positions {
                    first_loop = true;
                    last_profits.clear();
                }

                new_positions.store(false, Ordering::SeqCst);

                if first_loop {
                    counter = 0;
                    prev_total = grand_total;
                    first_loop = false;
                } else {
                    profit = grand_total - prev_total;
                    prev_total = grand_total;
        
                    if last_profits.len() == 12 { last_profits.pop_front(); }
                    last_profits.push_back(profit);
                }

    
                let sum_last: f64 = last_profits.iter().sum();
                let avg_last: f64 = if !last_profits.is_empty() {
                    sum_last / last_profits.len() as f64
                } else { 0.0 };

                let duration = counter * 5;
    
                // 3) –∏—Ç–æ–≥–æ–≤—ã–π –±–ª–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
                msg.push_str(&format!(
                    "üìà Total: ${:.6}\nŒî5 min: {:+.4}\nŒ£1 h (12√ó5 min): {:+.4} (avg {:+.4}/5 min) dur: {:}",
                    grand_total, profit, sum_last, avg_last, duration
                ));
                let _ = tx_tel.send(ServiceCommand::SendMessage(msg));
            }
        }
    });

    // ‚îÄ‚îÄ‚îÄ –¥–µ—Ä–∂–∏–º runtime –∂–∏–≤—ã–º
    futures::future::pending::<()>().await;

    Ok(())
}

async fn run_pool_with_restart(
    cfg:        PoolConfig,
    capital:    f64,
    pct:        [f64; 4],
    three_rng:  bool,
    tx_tg:      UnboundedSender<ServiceCommand>,
    need_new: Arc<AtomicBool>,
    close_ntf:  Arc<Notify>,
    min_restart: u64,
    range: Option<f32>,
    new_positions: Arc<AtomicBool>,
) -> Result<()> {
    use tokio::time::{sleep, Duration};
    
    loop {
        if let Some(t) = triggers::get_trigger("auto_trade").await? {
            println!("Got: {:?}", t);
            if t.state == true {
                sleep(Duration::from_secs(15)).await;
                continue;
            }
        }

        new_positions.store(true, Ordering::SeqCst);
        let res = orchestrator::orchestrator_pool(
            cfg.clone(), capital, pct, three_rng, tx_tg.clone(), need_new.clone(), close_ntf.clone(), min_restart, range
        ).await;

        match res {
            // –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ (–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã–ª–∏ / —Ü–µ–Ω–∞ –≤—ã—à–ª–∞ ‚Ä¶) ‚Äî
            // —á–µ—Ä–µ–∑ 10 —Å –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ
            Ok(()) => sleep(Duration::from_secs(10)).await,

            Err(e) => {
                let txt = format!("{e:#}");
                // ¬´–Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤¬ª (–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ open_with_funds‚Ä¶)
                if txt.contains("–≤—Å—ë –µ—â—ë –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç") ||
                txt.contains("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∏ B, –Ω–∏ USDC") {
                    let _ = tx_tg.send(ServiceCommand::SendMessage(format!(
                        "‚õî {} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤.\n{txt}",
                        cfg.name
                    )));
                    break;                    // –±–æ–ª—å—à–µ **–Ω–µ** —Ä–µ—Å—Ç–∞—Ä—Ç–∏–º
                }
                if txt.contains("dns error") || txt.contains("timed out") {
                    let _ = tx_tg.send(ServiceCommand::SendSignal(format!(
                        "üåê {}: RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 15 —Å‚Ä¶", cfg.name
                    )));
                    sleep(Duration::from_secs(15)).await;
                    continue;              // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
                }

                // –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Üí —Å–æ–æ–±—â–∞–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                let _ = tx_tg.send(ServiceCommand::SendSignal(format!(
                    "‚ö†Ô∏è {} —É–ø–∞–ª: {txt}\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å‚Ä¶",
                    cfg.name
                )));
                sleep(Duration::from_secs(15)).await;
            }
        }
    }
    return Ok(());
}