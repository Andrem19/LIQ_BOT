// src/exchange/engine.rs

use std::{env, sync::Arc};
use dotenv::dotenv;
use tokio::{
    sync::mpsc::{unbounded_channel, UnboundedSender},
    task,
    time::{sleep, Duration},
};
use anyhow::Result;

use crate::types::WorkerCommand;
use crate::exchange::hyperliquid::hl::HL;
use crate::telegram_service::telegram::Telegram;

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–≤–∏–∂–æ–∫ Hyperliquid –≤ —Ñ–æ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `UnboundedSender<WorkerCommand>`,
/// –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã `On(cfg)` –∏–ª–∏ `Off`.
///
/// MUST be called *–ø–æ—Å–ª–µ* –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Tokio runtime (–≤ `main.rs` –ø–æ–¥ `#[tokio::main]`).
pub fn start() -> Result<UnboundedSender<WorkerCommand>> {
    // –ó–∞–≥—Ä—É–∑–∫–∞ .env (HLSECRET, HL_TRADING_ADDRESS, TELEGRAM_API, CHAT_ID)
    dotenv().ok();

    // –∫–∞–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–º
    let (tx, mut rx) = unbounded_channel::<WorkerCommand>();

    // —Å–∞–º –≤–æ—Ä–∫–µ—Ä
    task::spawn(async move {
        // 1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HL-–∫–ª–∏–µ–Ω—Ç
        let mut hl = match HL::new_from_env().await {
            Ok(c) => c,
            Err(e) => {
                eprintln!("[exchange][ERROR] HL init failed: {e}");
                return;
            }
        };

        // 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let token = env::var("TELEGRAM_API").expect("TELEGRAM_API not set");
        let chat_id = env::var("CHAT_ID").expect("CHAT_ID not set");
        let tele = Telegram::new(&token, &chat_id);

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞
        let mut running = false;
        let mut entry_px = 0.0;
        let mut pos_size = 0.0;
        let mut tp_price = 0.0;
        let mut sl_price = 0.0;

        loop {
            tokio::select! {
                // –ü—Ä–∏—Ö–æ–¥ –∫–æ–º–∞–Ω–¥—ã On/Off
                Some(cmd) = rx.recv() => {
                    match cmd {
                        WorkerCommand::On(cfg) => {
                            // –ï—Å–ª–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é
                            if running {
                                if let Ok(Some(pos)) = hl.get_position("SOLUSDT").await {
                                    let _ = hl.open_market_order("SOLUSDT", "Buy", 0.0, true, pos.size).await;
                                }
                            }
                            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —à–æ—Ä—Ç –Ω–∞ cfg.amount/2
                            let amount = cfg.amount / 2.0;
                            if let Ok((_, px)) = hl.open_market_order("SOLUSDT", "Sell", amount, false, 0.0).await {
                                entry_px = px;
                                // –£–∑–Ω–∞—ë–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                                if let Ok(Some(pos)) = hl.get_position("SOLUSDT").await {
                                    pos_size = pos.size;
                                    // –ë–µ—Ä—ë–º TP –∏–∑ position_1.upper, SL –∏–∑ position_3.lower
                                    if let Some(p1) = cfg.position_1.clone() {
                                        tp_price = p1.upper_price;
                                    }
                                    if let Some(p3) = cfg.position_3.clone() {
                                        sl_price = p3.lower_price;
                                    }
                                    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                                    let tp_perc = if entry_px>0.0 { (tp_price/entry_px)-1.0 } else { 0.0 };
                                    let sl_perc = if entry_px>0.0 { 1.0-(sl_price/entry_px) } else { 0.0 };
                                    // –°—Ç–∞–≤–∏–º TP –∏ SL
                                    let _ = hl.open_tp("SOLUSDT", "Sell", pos_size, entry_px, tp_perc).await;
                                    let _ = hl.open_sl("SOLUSDT", "Sell", pos_size, entry_px, sl_perc).await;
                                    running = true;
                                }
                            }
                        }
                        WorkerCommand::Off => {
                            if running {
                                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
                                if let Ok(Some(pos)) = hl.get_position("SOLUSDT").await {
                                    let _ = hl.open_market_order("SOLUSDT", "Buy", 0.0, true, pos.size).await;
                                    // –®–ª—ë–º –æ—Å—Ç–∞—Ç–æ–∫ –≤ Telegram
                                    if let Ok(bal) = hl.get_balance().await {
                                        let msg = format!("üö´ Forced close. Balance: ${:.2}", bal);
                                        let _ = tele.send(&msg).await;
                                    }
                                }
                                running = false;
                            }
                        }
                    }
                },

                // –ö–∞–∂–¥—ã–µ 5 —Å, –µ—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ `On`, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
                _ = sleep(Duration::from_secs(5)), if running => {
                    if let Ok(price) = hl.get_last_price("SOLUSDT").await {
                        if price >= tp_price || price <= sl_price {
                            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ —Ç–µ–π–∫—É –∏–ª–∏ —Å—Ç–æ–ø—É
                            if let Ok(Some(pos)) = hl.get_position("SOLUSDT").await {
                                let _ = hl.open_market_order("SOLUSDT", "Buy", 0.0, true, pos.size).await;
                                if let Ok(bal) = hl.get_balance().await {
                                    let msg = format!("üîî Auto-closed at {:.2}. Balance: ${:.2}", price, bal);
                                    let _ = tele.send(&msg).await;
                                }
                            }
                            running = false;
                        }
                    }
                }
            }
        }
    });

    Ok(tx)
}
