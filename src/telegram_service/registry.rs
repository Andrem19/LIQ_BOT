// src/telegram_service/registry.rs

use tokio::sync::mpsc::UnboundedSender;
use crate::telegram_service::commands::Commander;
use crate::telegram_service::tl_engine::ServiceCommand;
use crate::params::POOL;
use tokio::sync::Notify;
use crate::wirlpool_services::wirlpool::open_with_funds_check_universal;
use crate::wirlpool_services::{
    get_info::fetch_pool_position_info,
    wirlpool::{harvest_whirlpool_position, summarize_harvest_fees,
        close_whirlpool_position, close_all_positions, list_positions_for_owner
    },
};
use orca_whirlpools::PositionOrBundle;
use tokio::time::sleep;
use std::time::Duration;
use solana_sdk::pubkey::Pubkey;
use std::str::FromStr;
use std::sync::Arc;

/// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–æ–º–∞–Ω–¥
pub fn register_commands(commander: Arc<Commander>, tx: UnboundedSender<ServiceCommand>, close_ntf:  Arc<Notify>) {
    let tx = Arc::new(tx);

    {
        let c: Arc<Commander> = Arc::clone(&commander);
        let t = Arc::clone(&tx);
        commander.add_command(&["info"], move |_params| {
            let c2 = Arc::clone(&c);
            let t2: Arc<UnboundedSender<ServiceCommand>> = Arc::clone(&t);
            async move {
                let tree = c2.show_tree();
                let _ = t2.send(ServiceCommand::SendMessage(
                    format!("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n{}", tree),
                ));
            }
        });
    }

    
    commander.add_command(&["close", "all"], {
        let tx = Arc::clone(&tx);
        let close_ntf = close_ntf.clone();
        move |_params| {
            let tx = Arc::clone(&tx);
            let close_ntf = close_ntf.clone(); 
            async move {
                // –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let _ = tx.send(ServiceCommand::SendMessage(
                    "üîí –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—Ç—å –í–°–ï –ø–æ–∑–∏—Ü–∏–∏‚Ä¶".into(),
                ));
    
                // –≤—Å—ë —Ç—è–∂—ë–ª–æ–µ ‚Äì –≤ —Ñ–æ–Ω–µ
                let tx_bg = Arc::clone(&tx);
                tokio::spawn(async move {
                    if let Err(err) = close_all_positions(300, None).await {
                        let _ = tx_bg.send(ServiceCommand::SendMessage(
                            format!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {err:?}"),
                        ));
                        return;
                    }
    
                    let _ = tx_bg.send(ServiceCommand::SendMessage(
                        "‚úÖ –ó–∞–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π‚Ä¶".into(),
                    ));
    
                    tokio::time::sleep(Duration::from_secs(2)).await;
                    close_ntf.notify_waiters();
    
                    match list_positions_for_owner(None).await {
                        Ok(positions) if positions.is_empty() => {
                            
                            let _ = tx_bg.send(ServiceCommand::SendMessage(
                                "üéâ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã.".into(),
                            ));
                        }
                        Ok(positions) => {
                            let mut msg = String::from("‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n");
                            for p in positions {
                                match p {
                                    PositionOrBundle::Position(hp) =>
                                        msg.push_str(&format!("- mint: {}\n",
                                            hp.data.position_mint)),
                                    PositionOrBundle::PositionBundle(pb) =>
                                        msg.push_str(&format!("- bundle account: {}\n",
                                            pb.address)),
                                }
                            }
                            let _ = tx_bg.send(ServiceCommand::SendMessage(msg));
                        }
                        Err(err) => {
                            let _ = tx_bg.send(ServiceCommand::SendMessage(
                                format!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: {err:?}"),
                            ));
                        }
                    }
                });
            }
        }
    });
    
    

    
    commander.add_command(&["close", "off"], {
        let tx = Arc::clone(&tx);
        move |_params| {
            let tx = Arc::clone(&tx);
            async move {
                // –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì —Å—Ä–∞–∑—É
                let _ = tx.send(ServiceCommand::SendMessage(
                    "üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –≤—ã–∫–ª—é—á–∞–µ–º—Å—è‚Ä¶".into(),
                ));
    
                // —Ç—è–∂—ë–ª—É—é —Ä–∞–±–æ—Ç—É + –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Äî –≤ —Ñ–æ–Ω–µ
                let tx_bg = Arc::clone(&tx);
                tokio::spawn(async move {
                    if let Err(err) = close_all_positions(300, None).await {
                        let _ = tx_bg.send(ServiceCommand::SendMessage(
                            format!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {err:?}"),
                        ));
                    } else {
                        let _ = tx_bg.send(ServiceCommand::SendMessage(
                            "‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É‚Ä¶".into(),
                        ));
                    }
    
                    // –¥–∞—ë–º Telegram-—Ü–∏–∫–ª—É —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    tokio::time::sleep(Duration::from_secs(1)).await;
                    std::process::exit(0);
                });
            }
        }
    });
    


    // 1. bal all
    commander.add_command(&["bal", "all"], {
        let tx = Arc::clone(&tx);
        move |_params| {
            let tx = Arc::clone(&tx);
            async move {
                let pool = POOL.clone();
                let mut results = Vec::new();
                for (idx, pos) in [pool.position_1.as_ref(), pool.position_2.as_ref(), pool.position_3.as_ref()].iter().enumerate() {
                    let msg = match pos.and_then(|p| p.position_address) {
                        Some(addr) => {
                            match fetch_pool_position_info(&pool, Some(addr)).await {
                                Ok(info) => format!(
                                    "Position {}:\n‚Ä¢ Pending A: {:.6}\n‚Ä¢ Pending B: {:.6}\n‚Ä¢ Total: {:.6}\n‚Ä¢ Price: {:.6} [{:.6} ‚Äì {:.6}]",
                                    idx + 1, info.pending_a, info.pending_b, info.sum, info.current_price, info.lower_price, info.upper_price
                                ),
                                Err(e) => format!("Position {}: –û—à–∏–±–∫–∞: {}", idx + 1, e),
                            }
                        },
                        None => format!("Position {}: ‚Äî", idx + 1),
                    };
                    results.push(msg);
                }
                let text = results.join("\n\n");
                let _ = tx.send(ServiceCommand::SendMessage(text));
            }
        }
    });


    // open fc --pct --usize
    commander.add_command(&["open"], {
        let tx = Arc::clone(&tx);
        move |params| {
            let tx = Arc::clone(&tx);
            async move {
                let pct = params.get(0)
                    .and_then(|v| v.parse::<f64>().ok())
                    .unwrap_or(0.4);
                let initial_amount_usdc = params.get(1)
                    .and_then(|v| v.parse::<f64>().ok())
                    .unwrap_or(100.0);
                let pool = POOL.clone();
                let info_res = fetch_pool_position_info(&pool, None).await;
                if let Ok(info) = info_res {
                    let cp = info.current_price;
                    let lower = cp * (1.0 - pct / 100.0);
                    let upper = cp * (1.0 + pct / 100.0);

                    match open_with_funds_check_universal(lower, upper, initial_amount_usdc, pool.clone(), 200).await {
                        Ok(mint) => {
                            let _ = tx.send(ServiceCommand::SendMessage(
                                format!(
                                    "‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (with funds check) c –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º ¬±{:.2}% –Ω–∞ —Å—É–º–º—É {:.2} USDC\nNFT mint: {}",
                                    pct, initial_amount_usdc, mint.position_mint
                                )
                            ));
                        }
                        Err(e) => {
                            let _ = tx.send(ServiceCommand::SendMessage(
                                format!("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {}", e)
                            ));
                        }
                    }
                } else {
                    let _ = tx.send(ServiceCommand::SendMessage(
                        format!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {:?}", info_res.err())
                    ));
                }
            }
        }
    });

    // 3. harvest all
    commander.add_command(&["harvest", "all"], {
        let tx = Arc::clone(&tx);
        move |_params| {
            let tx = Arc::clone(&tx);
            async move {
                let pool = POOL.clone();
                let mut results = Vec::new();
                for (idx, pos) in [pool.position_1.as_ref(), pool.position_2.as_ref(), pool.position_3.as_ref()].iter().enumerate() {
                    let msg = match pos.and_then(|p| p.position_nft) {
                        Some(addr) => {
                            let mint_res = Pubkey::from_str(addr);
                            if let Ok(mint) = mint_res {
                                match harvest_whirlpool_position(mint).await {
                                    Ok(fees) => {
                                        match summarize_harvest_fees(&pool, &fees).await {
                                            Ok(summary) => format!(
                                                "Harvest {}: {:.6} A, {:.6} B, total ${:.2}",
                                                idx + 1, summary.amount_a, summary.amount_b, summary.total_usd
                                            ),
                                            Err(e) => format!("Harvest {}: –û—à–∏–±–∫–∞ summary: {}", idx + 1, e),
                                        }
                                    }
                                    Err(e) => format!("Harvest {}: –û—à–∏–±–∫–∞: {}", idx + 1, e),
                                }
                            } else {
                                format!("Harvest {}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π mint", idx + 1)
                            }
                        }
                        None => format!("Harvest {}: ‚Äî", idx + 1),
                    };
                    results.push(msg);
                }
                let text = results.join("\n");
                let _ = tx.send(ServiceCommand::SendMessage(text));
            }
        }
    });

    // harvest --usize (–ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
    commander.add_command(&["harvest"], {
        let tx = Arc::clone(&tx);
        move |params| {
            let tx = Arc::clone(&tx);
            async move {
                let pos_num = params.get(0).and_then(|v| v.parse::<usize>().ok()).unwrap_or(1);
                let pool = POOL.clone();
                let pos = match pos_num {
                    1 => pool.position_1.as_ref(),
                    2 => pool.position_2.as_ref(),
                    3 => pool.position_3.as_ref(),
                    _ => None,
                };
                let msg = match pos.and_then(|p| p.position_nft) {
                    Some(addr) => {
                        if let Ok(mint) = Pubkey::from_str(addr) {
                            match harvest_whirlpool_position(mint).await {
                                Ok(fees) => {
                                    match summarize_harvest_fees(&pool, &fees).await {
                                        Ok(summary) => format!(
                                            "Harvest {}: {:.6} A, {:.6} B, total ${:.2}",
                                            pos_num, summary.amount_a, summary.amount_b, summary.total_usd
                                        ),
                                        Err(e) => format!("Harvest {}: –û—à–∏–±–∫–∞ summary: {}", pos_num, e),
                                    }
                                }
                                Err(e) => format!("Harvest {}: –û—à–∏–±–∫–∞: {}", pos_num, e),
                            }
                        } else {
                            format!("Harvest {}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π mint", pos_num)
                        }
                    }
                    None => format!("Harvest {}: ‚Äî", pos_num),
                };
                let _ = tx.send(ServiceCommand::SendMessage(msg));
            }
        }
    });

    // 4. close all
    commander.add_command(&["close", "full"], {
        let tx = Arc::clone(&tx);
        move |_params| {
            let tx = Arc::clone(&tx);
            async move {
                let pool = POOL.clone();
                let mut results = Vec::new();
                for (idx, pos) in [pool.position_1.as_ref(), pool.position_2.as_ref(), pool.position_3.as_ref()].iter().enumerate() {
                    let msg = match pos.and_then(|p| p.position_nft) {
                        Some(nft_addr) => {
                            let mint_res = Pubkey::from_str(nft_addr);
                            if let Ok(mint) = mint_res {
                                match close_whirlpool_position(mint, 150).await {
                                    Ok(_) => format!("‚úÖ Closed position {}", idx + 1),
                                    Err(e) => format!("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {}: {}", idx + 1, e),
                                }
                            } else {
                                format!("Position {}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π NFT mint", idx + 1)
                            }
                        }
                        None => format!("Position {}: ‚Äî", idx + 1),
                    };
                    results.push(msg);
                }
                let text = results.join("\n");
                let _ = tx.send(ServiceCommand::SendMessage(text));
            }
        }
    });

    // close --usize (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
    commander.add_command(&["close"], {
        let tx = Arc::clone(&tx);
        move |params| {
            let tx = Arc::clone(&tx);
            async move {
                let pos_num = params.get(0).and_then(|v| v.parse::<usize>().ok()).unwrap_or(1);
                let pool = POOL.clone();
                let pos = match pos_num {
                    1 => pool.position_1.as_ref(),
                    2 => pool.position_2.as_ref(),
                    3 => pool.position_3.as_ref(),
                    _ => None,
                };
                let msg = match pos.and_then(|p| p.position_nft) {
                    Some(nft_addr) => {
                        if let Ok(mint) = Pubkey::from_str(nft_addr) {
                            match close_whirlpool_position(mint, 150).await {
                                Ok(_) => format!("‚úÖ Closed position {}", pos_num),
                                Err(e) => format!("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {}: {}", pos_num, e),
                            }
                        } else {
                            format!("Position {}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π NFT mint", pos_num)
                        }
                    }
                    None => format!("Position {}: ‚Äî", pos_num),
                };
                let _ = tx.send(ServiceCommand::SendMessage(msg));
            }
        }
    });

    // --- SHORT OPEN: short --uint
    commander.add_command(&["short"], {
        let tx = Arc::clone(&tx);
        move |params| {
            let tx = Arc::clone(&tx);
            async move {
                let amount = params.get(0)
                    .and_then(|v| v.parse::<f64>().ok())
                    .unwrap_or(0.0);
                if amount <= 0.0 {
                    let _ = tx.send(ServiceCommand::SendMessage("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ USDT: short --300".into()));
                    return;
                }
                let mut hl = match crate::exchange::hyperliquid::hl::HL::new_from_env().await {
                    Ok(h) => h,
                    Err(e) => {
                        let _ = tx.send(ServiceCommand::SendMessage(format!("HL init error: {e}")));
                        return;
                    }
                };
                match hl.open_market_order("SOLUSDT", "Sell", amount, false, 0.0).await {
                    Ok((cloid, px)) => {
                        let _ = tx.send(ServiceCommand::SendMessage(format!(
                            "‚úÖ Short –æ—Ç–∫—Ä—ã—Ç –Ω–∞ {:.2} USDT\nOrder ID: {}\n–¶–µ–Ω–∞: {:.4}", amount, cloid, px
                        )));
                    }
                    Err(e) => {
                        let _ = tx.send(ServiceCommand::SendMessage(format!("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–æ—Ä—Ç–∞: {e}")));
                    }
                }
            }
        }
    });

    // --- SHORT CLOSE: short close
    commander.add_command(&["short", "close"], {
        let tx = Arc::clone(&tx);
        move |_params| {
            let tx = Arc::clone(&tx);
            async move {
                let mut hl = match crate::exchange::hyperliquid::hl::HL::new_from_env().await {
                    Ok(h) => h,
                    Err(e) => {
                        let _ = tx.send(ServiceCommand::SendMessage(format!("HL init error: {e}")));
                        return;
                    }
                };
                // 1. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
                match hl.get_position("SOLUSDT").await {
                    Ok(Some(pos)) if pos.size > 0.0 => {
                        // 2. –ó–∞–∫—Ä—ã—Ç—å –µ—ë (reduce_only = true, amount_coins = pos.size)
                        match hl.open_market_order("SOLUSDT", "Short", 0.0, true, pos.size).await {
                            Ok((cloid, close_px)) => {
                                // 3. –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å
                                match hl.get_balance().await {
                                    Ok(bal) => {
                                        let _ = tx.send(ServiceCommand::SendMessage(
                                            format!(
                                                "‚úÖ –®–æ—Ä—Ç –ø–æ SOLUSDT ({:.4} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤) —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç (order {})\n–ë–∞–ª–∞–Ω—Å: ${:.2}",
                                                pos.size, cloid, bal
                                            )
                                        ));
                                    }
                                    Err(e) => {
                                        let _ = tx.send(ServiceCommand::SendMessage(
                                            format!(
                                                "‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {e}"
                                            )
                                        ));
                                    }
                                }
                            }
                            Err(e) => {
                                let _ = tx.send(ServiceCommand::SendMessage(
                                    format!("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
                                ));
                            }
                        }
                    }
                    Ok(_) => {
                        let _ = tx.send(ServiceCommand::SendMessage("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —à–æ—Ä—Ç–∞ –ø–æ SOLUSD".into()));
                    }
                    Err(e) => {
                        let _ = tx.send(ServiceCommand::SendMessage(
                            format!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
                        ));
                    }
                }
            }
        }
    });


}
