use ethers::contract::EthDisplay;
use solana_sdk::pubkey::Pubkey;
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use std::fmt;

/// –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —á–∏—Ç–∞–µ—Ç `reporter()`
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct PoolRuntimeInfo {
    pub name:        String,   // ‚ÄúSOL/USDC‚Äù –∏–ª–∏ ‚ÄúRAY/SOL‚Äù
    pub last_price:  f64,      // —Å–ø–æ—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ quoted-—Ñ–æ—Ä–º–∞—Ç–µ (—Å–º. –Ω–∏–∂–µ)
    pub fees_usd:    f64,      // –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ (–≤ USD —ç–∫–≤.)
}

impl Default for PoolRuntimeInfo {
    fn default() -> Self {
        Self { name: String::new(), last_price: 0.0, fees_usd: 0.0 }
    }
}

#[derive(Debug)]
pub struct PoolPositionInfo {
    pub pending_a: f64,
    pub pending_b: f64,
    pub pending_a_usd: f64,
    pub sum: f64,
    pub amount_a: f64,
    pub amount_b: f64,
    pub value_a: f64,
    pub value_b: f64,
    pub pct_a: f64,
    pub pct_b: f64,
    pub current_price: f64,
    pub lower_price: f64,
    pub upper_price: f64,
    pub pct_down: f64,
    pub pct_up: f64,
    pub index: u8,
}

#[derive(Clone, Debug, PartialEq)]
pub enum Range {
    Three,
    Two,
    One
}

#[derive(Clone, Debug, PartialEq)]
pub enum Role {
    Middle,
    MiddleSmall,
    Up,
    Down,
}

impl Role {
    pub fn as_str(&self) -> &str {
        match self {
            Role::MiddleSmall => "MiddleSmall",
            Role::Middle => "Middle",
            Role::Up     => "Up",
            Role::Down   => "Down",
        }
    }
    pub fn from_str(s: &str) -> Option<Self> {
        match s {
            "MiddleSmall" => Some(Role::MiddleSmall),
            "Middle" => Some(Role::Middle),
            "Up"     => Some(Role::Up),
            "Down"   => Some(Role::Down),
            _        => None,
        }
    }
}

/// –û–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ª–∏–∫–≤. –ø–æ–∑–∏—Ü–∏–∏
#[derive(Clone, Debug)]
pub struct LiqPosition {
    pub role:             Role,
    pub position_address: Option<String>,
    pub position_nft:     Option<String>,
    pub upper_price:      f64,
    pub lower_price:      f64,
}

/// –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—É–ª–∞ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, id=1)
#[derive(Clone, Debug)]
pub struct PoolConfig {
    pub amount:                f64,
    pub program:               String,
    pub name:                  String,
    pub pool_address:          String,
    pub position_1:            Option<LiqPosition>,
    pub position_2:            Option<LiqPosition>,
    pub position_3:            Option<LiqPosition>,
    pub mint_a:                String,
    pub mint_b:                String,
    pub decimal_a:             u16,
    pub decimal_b:             u16,
    pub date_opened:           DateTime<Utc>,
    pub is_closed:             bool,
    pub commission_collected_1:f64,
    pub commission_collected_2:f64,
    pub commission_collected_3:f64,
    pub total_value_open:      f64,
    pub total_value_current:   f64,
    pub wallet_balance:   f64,
}


#[derive(Debug, Clone)]
pub struct RangeAlloc {
    pub role: Role,          // ‚ú± –ò–ó–ú–ï–ù–ï–ù–û: Up / Middle / Down
    pub range_idx:  usize,   // —á–∏—Å–ª–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å-–º–µ—Ç–∫–∞ (0,1,2) ‚Äì –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
    pub usdc_amount:       f64,   // ¬´—á–∏—Å—Ç—ã–π¬ª USDC (—Ç–æ–ª—å–∫–æ –¥–ª—è Middle)
    pub sol_amount:        f64,   // ¬´—á–∏—Å—Ç—ã–π¬ª SOL   (—Ç–æ–ª—å–∫–æ –¥–ª—è Up / Down)
    pub usdc_equivalent:   f64,   // —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ USDC
    pub upper_price:       f64,
    pub lower_price:       f64,
}

#[derive(Debug, Clone)]
pub struct PriceBound {
    pub bound_type: BoundType,
    pub value: f64,
}

#[derive(Debug, Clone, PartialEq)]
pub enum BoundType {
    UpperOuter,   // –≤–µ—Ä—Ö–Ω—è—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è (–≤—ã—à–µ —Ä—ã–Ω–∫–∞)
    UpperInner,   // –≤–µ—Ä—Ö–Ω—è—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è (–Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —Ä—ã–Ω–∫–∞)
    LowerInner,   // –Ω–∏–∂–Ω—è—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è (–Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞)
    LowerOuter,   // –Ω–∏–∂–Ω—è—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è (–µ—â—ë –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞)
}

#[derive(Clone, Debug)]
pub enum WorkerCommand {
    /// Start a new cycle with this pool configuration.
    On(PoolConfig),
    /// Immediately force-close any open position and go idle.
    Off,
}

#[derive(Debug)]
pub struct OpenPositionResult {
    pub position_mint: Pubkey,
    /// –û–±—ä—ë–º WSOL (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö —Ç–æ–∫–µ–Ω–∞, –Ω–µ –≤ –∞—Ç–æ–º–∞—Ö)
    pub amount_wsol: f64,
    /// –û–±—ä—ë–º USDC (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö —Ç–æ–∫–µ–Ω–∞, –Ω–µ –≤ –∞—Ç–æ–º–∞—Ö)
    pub amount_usdc: f64,
}

#[derive(Debug, Clone, Default)]
pub struct WalletBalanceInfo {
    pub sol_balance:    f64,
    pub usdc_balance:   f64,
    pub sol_usd_price:  f64,
    pub sol_in_usd:     f64,
    pub usdc_in_usd:    f64,
    pub total_usd:      f64,
}

impl fmt::Display for WalletBalanceInfo {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "üè¶ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n\
             ‚ñ∫ SOL: {:.4} (~${:.2})\n\
             ‚ñ∫ USDC: {:.4} (~${:.2})\n\
             ‚ñ∫ –í—Å–µ–≥–æ: ‚âà ${:.2}",
            self.sol_balance,
            self.sol_in_usd,
            self.usdc_balance,
            self.usdc_in_usd,
            self.total_usd,
        )
    }
}